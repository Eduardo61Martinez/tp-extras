
type Presa = String -- nombre de presa
    
type Territorio = String -- nombre de territorio 
    
type Nombre = String -- nombre de lobo
    
data Lobo = Cazador Nombre [Presa] Lobo Lobo Lobo | Explorador Nombre [Territorio] Lobo Lobo| Cría Nombre
    deriving Show
data Manada = M Lobo
    deriving Show


--eje1

manada0= M lobo0

lobo0 = Cazador "cazador1" [p1,p2,p3] loboE1 loboE2 cria1

loboE1 = Explorador "explorador1" [t1,t2,t3]  cria2 cria3

loboE2 = Explorador "explorador2" [t4]  cria4 cria3
---crias------
cria1 = "cria1"
cria2 = "cria2"
cria3 = "cria3"
cria4 = "cria4"
----- presas-----
p1 = "presa1"
p2 = "presa2"
p3 = "presa3"
------territorios---
t1 ="terreno1"
t2 ="terreno2"
t3 ="terreno3"
t4 ="terreno4"


buenaCaza :: Manada -> Bool
buenaCaza (M lobos) =  alimentoMayorACrias lobos 

alimentoMayorACrias :: Lobo -> Bool
alimentoMayorACrias (Cría nmCria) = 
alimentoMayorACrias (Cazador nom ps l1 l2 l3) = alimentosEnMayorA ps (cantidadCriasDe l1) && alimentoMayorACrias l1 && alimentoMayorACrias l2
alimentoMayorACrias (Explorador nom ts l1 l2  ) = alimentosEnMayorA ps (cantidadCriasDe l1) && alimentoMayorACrias l2 

alimentosMayorA :: Bool

cantidadCriasDe :: Lobo -> Int
cantidadCriasDe (Crias _) = 0
cantidadCriasDe (Cazador _ _ l1 l2 l3) =  unoSiCeroSino (esCria_ l1) + cantidadCriasDe l2 + cantidadCriasDe l3
cantidadCriasDe (Explorador _ _ l1 l2) = unoSiCeroSino (esCria_ l1) + cantidadCriasDe l2 


esCria_ :: Lobo -> Bool
esCria_ (Cria _) = True
esCria_ _ = False

unoSiCeroSino :: Bool -> Int
unoSiCeroSino True = 1
unoSiCeroSino False = 0
